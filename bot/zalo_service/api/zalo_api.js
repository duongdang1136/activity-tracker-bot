
import { Zalo, ThreadType } from 'zca-js';

class ZaloAPI {
    constructor(config, supabaseClient) {
        this.api = null; // API instance sau khi login
        this.isConnected = false;
        this.config = config;
        this.supabase = supabaseClient;
    }
    async connect() {
        console.log("‚ö†Ô∏è Note: connect() is deprecated. API instance should be injected from main file.");
        return this.api;
    }

    startListening() {
        console.log("‚ö†Ô∏è Note: Message listening is handled in main file.");
        return true;
    }

    stopListening() {
        if (this.api && this.api.listener) {
            this.api.listener.stop();
            console.log("üõë ƒê√£ d·ª´ng l·∫Øng nghe tin nh·∫Øn Zalo.");
        }
    }

    // Setter ƒë·ªÉ inject API instance t·ª´ main file
    setAPI(apiInstance) {
        this.api = apiInstance;
        this.isConnected = true;
        console.log("‚úÖ API instance injected into ZaloAPI class.");
    }


    // G·ª≠i tin nh·∫Øn
    async sendMessage(message, threadId, isGroup = false) {
         if (!this.api) {
            throw new Error("API instance ch∆∞a ƒë∆∞·ª£c inject. H√£y g·ªçi setAPI() tr∆∞·ªõc.");
        }
        try {
            // X√°c ƒë·ªãnh thread_type d·ª±a tr√™n tham s·ªë isGroup
            const threadType = isGroup ? ThreadType.GROUP : ThreadType.USER;

            // G·ªçi ph∆∞∆°ng th·ª©c sendMessage v·ªõi thread_type ƒë√∫ng
            await this.api.sendMessage(
                { msg: message },
                threadId,
                threadType
            );

            console.log(`üì§ ƒê√£ g·ª≠i tin nh·∫Øn t·ªõi ${isGroup ? 'nh√≥m' : 'ng∆∞·ªùi d√πng'} ${threadId}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i tin nh·∫Øn t·ªõi ${threadId}:`, error);
        }
    }

    // --- C√ÅC H√ÄM GIAO TI·∫æP V·ªöI SUPABASE ---

    // H√†m chung ƒë·ªÉ g·ªçi RPC c·ªßa Supabase
    async callRpc(functionName, params) {
        try {
            const { error } = await this.supabase.rpc(functionName, params);
            if (error) {
                console.error(`‚ùå L·ªói khi g·ªçi RPC '${functionName}':`, error.message);
                return null;
            }
            return true; // Tr·∫£ v·ªÅ true n·∫øu g·ªçi th√†nh c√¥ng
        } catch (error) {
            console.error(`‚ùå L·ªói nghi√™m tr·ªçng khi g·ªçi RPC '${functionName}':`, error.message);
            return null;
        }
    }

    // Ghi nh·∫≠n ho·∫°t ƒë·ªông qua Supabase RPC
    async trackActivity(message) {
        const isGroup = message.type === ThreadType.Group;
        if (!isGroup) return; // Ch·ªâ theo d√µi ho·∫°t ƒë·ªông trong nh√≥m

        const metadata = {
            display_name: message.sender.name,
            group_name: message.thread.name,
            content: message.data.content
        };

        console.log(`[Activity] Tracking 'message' from ${metadata.display_name} in group ${metadata.group_name}`);

        return await this.callRpc('update_activity_with_group', {
            p_user_platform_id: message.sender.id.toString(),
            p_platform_name: 'zalo',
            p_group_platform_id: message.thread.id.toString(),
            p_activity_type: 'message', // C√≥ th·ªÉ m·ªü r·ªông cho c√°c lo·∫°i kh√°c
            p_metadata: metadata,
        });
    }
    // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i m√£ li√™n k·∫øt kh√¥ng
    isLinkingToken(content) {
        if (!content || typeof content !== 'string') return false;

        const trimmedContent = content.trim();
        return this.config.LINKING_TOKEN_PATTERNS.some(pattern =>
            pattern.test(trimmedContent)
        );
    }

    // H√†m m·ªõi: X·ª≠ l√Ω m√£ li√™n k·∫øt
    async handleLinkingToken(token, authorId) {
        console.log(`[Linking] B·∫Øt ƒë·∫ßu x√°c th·ª±c token '${token}' cho ng∆∞·ªùi d√πng ${authorId}`);
        const platform_id_zalo = this.config.PLATFORM_ID;

        try {
            // 1. T√¨m token
            const { data: tokenData, error: findError } = await this.supabase
                .from('platform_linking_tokens')
                .select('*')
                .eq('token', token.toUpperCase())
                .eq('platform_id', platform_id_zalo)
                .eq('is_used', false)
                .single(); // L·∫•y m·ªôt b·∫£n ghi duy nh·∫•t

            // [Token kh√¥ng h·ª£p l·ªá]
            if (findError || !tokenData) {
                console.log(`[Linking] Token '${token}' kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.`);
                // Theo bi·ªÉu ƒë·ªì, c√≥ th·ªÉ kh√¥ng c·∫ßn g·ª≠i tin nh·∫Øn l·ªói ƒë·ªÉ tr√°nh spam.
                // N·∫øu mu·ªën g·ª≠i, th√™m d√≤ng: await this.sendMessage("M√£ li√™n k·∫øt kh√¥ng h·ª£p l·ªá.", authorId);
                return false; // Kh√¥ng ph·∫£i m√£, ƒë·ªÉ cho h√†m kh√°c x·ª≠ l√Ω
            }
            // B∆∞·ªõc 8: ƒê√£ c√≥ d·ªØ li·ªáu token
            console.log("[Linking] T√¨m th·∫•y token h·ª£p l·ªá.");

            // 2. Ki·ªÉm tra h·∫øt h·∫°n
            const expires_at = new Date(tokenData.expires_at);
            if (new Date() > expires_at) {
                await this.sendMessage("M√£ li√™n k·∫øt c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng t·∫°o m√£ m·ªõi tr√™n website.", authorId);
                // ƒê√°nh d·∫•u m√£ n√†y ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ kh√¥ng ki·ªÉm tra l·∫°i
                await this.supabase
                    .from('platform_linking_tokens')
                    .update({ is_used: true })
                    .eq('id', tokenData.id);
                return true; // ƒê√£ x·ª≠ l√Ω (d√π l√† l·ªói h·∫øt h·∫°n)
            }

            // [Token h·ª£p l·ªá] -> Ti·∫øp t·ª•c lu·ªìng
            try {
                const super_user_id = tokenData.user_id;
                const zalo_platform_user_id = authorId.toString();

                // L·∫•y t√™n Zalo c·ªßa ng∆∞·ªùi d√πng
                let zalo_username = "Zalo User";
                try {
                    // Note: zca-js c√≥ th·ªÉ kh√¥ng c√≥ getUserInfo, t√πy v√†o version
                    const userInfo = await this.api.getUserInfo(zalo_platform_user_id);
                    zalo_username = userInfo ? userInfo.name : "Zalo User";
                } catch (error) {
                    console.log("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error.message);
                }

                // B∆∞·ªõc 9: INSERT INTO user_platform_profiles
                const { error: insertError } = await this.supabase
                    .from('user_platform_profiles')
                    .insert({
                        user_id: super_user_id,
                        platform_id: platform_id_zalo,
                        platform_user_id: zalo_platform_user_id,
                        platform_username: zalo_username,
                    });

                // B∆∞·ªõc 10: X·ª≠ l√Ω l·ªói (n·∫øu c√≥)
                if (insertError) {
                    // L·ªói n√†y th∆∞·ªùng l√† do t√†i kho·∫£n Zalo ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt (unique constraint violation)
                    console.error("‚ùå L·ªói khi t·∫°o li√™n k·∫øt:", insertError.message);
                    await this.sendMessage("Kh√¥ng th·ªÉ li√™n k·∫øt. T√†i kho·∫£n Zalo n√†y c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi m·ªôt ng∆∞·ªùi d√πng kh√°c.", authorId);
                    return true;
                }

                console.log(`[Linking] ƒê√£ t·∫°o li√™n k·∫øt cho user ${super_user_id}`);

                // B∆∞·ªõc 11: UPDATE platform_linking_tokens SET is_used = true
                await this.supabase
                    .from('platform_linking_tokens')
                    .update({ is_used: true })
                    .eq('id', tokenData.id);
                // B∆∞·ªõc 12: X√°c nh·∫≠n c·∫≠p nh·∫≠t (ƒë√£ xong)
                console.log(`[Linking] ƒê√£ c·∫≠p nh·∫≠t token ${token} th√†nh ƒë√£ s·ª≠ d·ª•ng.`);

                // B∆∞·ªõc 13: G·ª≠i tin nh·∫Øn "Li√™n k·∫øt th√†nh c√¥ng!"
                await this.sendMessage("Ch√∫c m·ª´ng! T√†i kho·∫£n Zalo c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c li√™n k·∫øt th√†nh c√¥ng.", authorId);
                return true; // B√°o hi·ªáu ƒë√£ x·ª≠ l√Ω th√†nh c√¥ng

            } catch (e) {
                console.error("‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh li√™n k·∫øt:", e);
                await this.sendMessage("ƒê√£ c√≥ l·ªói h·ªá th·ªëng x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", authorId);
                return true; // V·∫´n tr·∫£ v·ªÅ true v√¨ ƒë√£ c·ªë g·∫Øng x·ª≠ l√Ω
            }

        } catch (error) {
            console.error("‚ùå L·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh li√™n k·∫øt:", error);
            await this.sendMessage("ƒê√£ c√≥ l·ªói h·ªá th·ªëng x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.", authorId, false);
            return true;
        }
    }
    // --- C√ÅC H√ÄM TI·ªÜN √çCH ---
    isCommand(message) {
        if (!message || typeof message !== 'string') return false;
        return message.trim().startsWith(this.config.COMMAND_PREFIX);
    }

    parseCommand(message) {
        if (!this.isCommand(message)) return null;

        const parts = message.trim().substring(this.config.COMMAND_PREFIX.length).split(' ');
        return {
            command: parts[0].toLowerCase(),
            args: parts.slice(1)
        };
    }
}

export default ZaloAPI;