import asyncio
from config import db_manager, settings
from api import telegram_api_client, zalo_api_client
try:
    from bot.discord_bot import DiscordApiClient
except ImportError:
    print("Warning: Discord API client not available. Management for Discord will be skipped.")
    discord_api_client = None

class ManagementService:
    """
    D·ªãch v·ª• qu·∫£n l√Ω th√†nh vi√™n t·ª± ƒë·ªông.
    - C·∫£nh b√°o ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông.
    - X√≥a ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông sau c·∫£nh b√°o.
    """
    def __init__(self):
        # Mapping platform name to the corresponding async API client
        # ƒêi·ªÅu n√†y cho ph√©p ch√∫ng ta g·ªçi client m·ªôt c√°ch linh ho·∫°t d·ª±a tr√™n t√™n platform
        self.api_clients = {
            'discord': discord_api_client,
            'telegram': telegram_api_client,
            'zalo': zalo_api_client
        }
        print("‚úÖ ManagementService initialized with available API clients.")

    async def _process_group(self, group_config: dict, action: str):
        """
        H√†m x·ª≠ l√Ω chung cho m·ªôt nh√≥m, th·ª±c hi·ªán m·ªôt h√†nh ƒë·ªông c·ª• th·ªÉ ('warn' ho·∫∑c 'kick').
        """
        group_db_id = group_config.get('group_db_id')
        platform_db_id = group_config.get('platform_db_id')
        platform_name = group_config.get('platform_name', '').lower()

        if not all([group_db_id, platform_db_id, platform_name]):
            print(f"‚ùå Invalid group configuration: {group_config}")
            return

        api_client = self.api_clients.get(platform_name)
        if not api_client:
            print(f"‚ö†Ô∏è No API client configured for platform '{platform_name}'. Skipping.")
            return

        print(f"--- Processing group '{group_config.get('group_name', 'N/A')}' on {platform_name.upper()} for action: {action.upper()} ---")

        # L·∫•y danh s√°ch user kh√¥ng ho·∫°t ƒë·ªông t·ª´ database
        # (Gi·∫£ s·ª≠ h√†m RPC `get_inactive_members` ƒë√£ t·ªìn t·∫°i trong DB)
        inactive_users = db_manager.get_inactive_users_in_group(group_db_id, platform_db_id)

        if not inactive_users:
            print("‚úÖ No inactive users found. Nothing to do.")
            return

        tasks = []
        for user in inactive_users:
            user_platform_id = user.get('user_platform_id')
            group_platform_id = user.get('group_platform_id')
            user_display_name = user.get('display_name', 'member')

            if action == 'warn':
                warn_message = (
                    f"üëã Ch√†o b·∫°n {user_display_name},\n"
                    f"H·ªá th·ªëng ghi nh·∫≠n b·∫°n ƒë√£ kh√¥ng ho·∫°t ƒë·ªông trong m·ªôt th·ªùi gian d√†i. "
                    f"Vui l√≤ng t∆∞∆°ng t√°c trong v√≤ng {settings.bot.inactive_warn_days} ng√†y t·ªõi ƒë·ªÉ gi·ªØ v·ªã tr√≠ trong nh√≥m nh√©!"
                )
                print(f" vysok Preparing to WARN user '{user_display_name}' ({user_platform_id}).")
                # T·∫°o m·ªôt coroutine ƒë·ªÉ g·ª≠i tin nh·∫Øn
                task = api_client.send_message(group_platform_id, warn_message)
                tasks.append(task)
                # TODO: C·∫≠p nh·∫≠t CSDL r·∫±ng ng∆∞·ªùi d√πng n√†y ƒë√£ ƒë∆∞·ª£c c·∫£nh b√°o (v√≠ d·ª•: c·ªôt last_warned_at)

            elif action == 'kick':
                print(f"üö® Preparing to KICK user '{user_display_name}' ({user_platform_id}).")
                # T·∫°o m·ªôt coroutine ƒë·ªÉ kick ng∆∞·ªùi d√πng
                task = api_client.remove_user(group_platform_id, user_platform_id)
                tasks.append(task)
                # TODO: C·∫≠p nh·∫≠t CSDL r·∫±ng ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã x√≥a (v√≠ d·ª•: `is_active=false` trong group_memberships)

        # Ch·∫°y t·∫•t c·∫£ c√°c t√°c v·ª• (g·ª≠i tin, kick) m·ªôt c√°ch ƒë·ªìng th·ªùi ƒë·ªÉ tƒÉng hi·ªáu su·∫•t
        if tasks:
            print(f"üöÄ Executing {len(tasks)} tasks concurrently...")
            await asyncio.gather(*tasks, return_exceptions=True)
            print("‚úÖ All tasks executed.")

    async def run_warning_cycle(self, managed_groups: list):
        """
        Ch·∫°y chu tr√¨nh c·∫£nh b√°o cho t·∫•t c·∫£ c√°c nh√≥m ƒë∆∞·ª£c qu·∫£n l√Ω.
        """
        print("\n" + "="*50)
        print("üîÑ STARTING INACTIVE USER WARNING CYCLE üîÑ")
        print("="*50)
        for group_config in managed_groups:
            await self._process_group(group_config, action='warn')
        print("="*50)
        print("‚úÖ FINISHED INACTIVE USER WARNING CYCLE ‚úÖ")
        print("="*50 + "\n")

    async def run_kick_cycle(self, managed_groups: list):
        """
        Ch·∫°y chu tr√¨nh x√≥a th√†nh vi√™n cho t·∫•t c·∫£ c√°c nh√≥m ƒë∆∞·ª£c qu·∫£n l√Ω.
        (N√™n ch·∫°y sau chu tr√¨nh c·∫£nh b√°o m·ªôt kho·∫£ng th·ªùi gian)
        """
        print("\n" + "="*50)
        print("üö® STARTING INACTIVE USER KICK CYCLE üö®")
        print("="*50)
        for group_config in managed_groups:
            await self._process_group(group_config, action='kick')
        print("="*50)
        print("‚úÖ FINISHED INACTIVE USER KICK CYCLE ‚úÖ")
        print("="*50 + "\n")