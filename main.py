import asyncio
import threading
import time
import schedule
import subprocess
import threading
import time
import sys
import os
from typing import List, Dict

# Import c√°c h√†m kh·ªüi ƒë·ªông t·ª´ c√°c module t∆∞∆°ng ·ª©ng
from bot.discord_bot import start_discord_bot
from bot.telegram_bot import start_telegram_bot
from web.app import run_web_app
from services import management_service
from config import settings

# ==============================================================================
# C·∫§U H√åNH TRUNG T√ÇM CHO C√ÅC NH√ìM C·∫¶N QU·∫¢N L√ù
# ==============================================================================
# Thay th·∫ø c√°c gi√° tr·ªã UUID v√† ID n√†y b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ database c·ªßa b·∫°n.
# B·∫°n c√≥ th·ªÉ l·∫•y c√°c ID n√†y t·ª´ b·∫£ng `platform_groups` v√† `platforms` trong Supabase.
MANAGED_GROUPS: List[Dict] = [
    {
        'group_name': 'ƒê·∫∑ng Gia (Zalo)', # T√™n nh√≥m Zalo c·ªßa b·∫°n
        'group_db_id': '6799604717677589329', # <<--- THAY TH·∫æ B·∫∞NG groupid ZALO C·ª¶A B·∫†N
        'platform_db_id': 1, # ID c·ªßa platform 'Zalo' trong b·∫£ng platforms
        'platform_name': 'Zalo',
    },
    {
        'group_name': 'Trading Squad (Discord)', # B·∫°n c√≥ th·ªÉ ƒë·∫∑t t√™n b·∫•t k·ª≥ ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
        'group_db_id': '3a6c0697-041b-4212-9ce0-e95ec68f58b2', # groupid c·ªßa Discord b·∫°n cung c·∫•p
        'platform_db_id': 2, # ID c·ªßa platform 'Discord' trong b·∫£ng platforms
        'platform_name': 'Discord',
    },
    {
        'group_name': 'ƒê·∫∑ng Gia (Zalo)', # T√™n nh√≥m Zalo c·ªßa b·∫°n
        'group_db_id': '6799604717677589329', # <<--- THAY TH·∫æ B·∫∞NG groupid ZALO C·ª¶A B·∫†N
        'platform_db_id': 3, # ID c·ªßa platform 'Zalo' trong b·∫£ng platforms
        'platform_name': 'Telegram',
    },
    # Th√™m c√°c nh√≥m kh√°c ·ªü ƒë√¢y n·∫øu c√≥...
]

def run_zalo_bot_process():
    """
    H√†m n√†y s·∫Ω kh·ªüi ch·∫°y bot Zalo (Node.js) nh∆∞ m·ªôt ti·∫øn tr√¨nh con.
    """
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a script Node.js
    service_dir = os.path.join(os.path.dirname(__file__), 'bot', 'zalo_service')
    script_path = os.path.join(service_dir, 'index.js')

    # L·ªánh ƒë·ªÉ ch·∫°y Node.js
    # sys.executable l√† ƒë∆∞·ªùng d·∫´n ƒë·∫øn tr√¨nh th√¥ng d·ªãch Python hi·ªán t·∫°i,
    # ch√∫ng ta s·∫Ω t√¨m node.exe ·ªü m·ªôt v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi ho·∫∑c trong PATH
    node_command = 'node' # Gi·∫£ ƒë·ªãnh 'node' c√≥ trong PATH c·ªßa h·ªá th·ªëng

    print(f"ü§ñ Starting Zalo Bot Service process from: {service_dir}")

    # subprocess.Popen s·∫Ω ch·∫°y l·ªánh trong m·ªôt ti·∫øn tr√¨nh m·ªõi v√† kh√¥ng block.
    # stdout=subprocess.PIPE v√† stderr=subprocess.PIPE ƒë·ªÉ ch√∫ng ta c√≥ th·ªÉ ƒë·ªçc log.
    process = subprocess.Popen(
        [node_command, script_path],
        stdout=sys.stdout, # Chuy·ªÉn h∆∞·ªõng log c·ªßa Node.js ra terminal ch√≠nh
        stderr=sys.stderr, # Chuy·ªÉn h∆∞·ªõng l·ªói c·ªßa Node.js ra terminal ch√≠nh
        cwd=service_dir # ƒê·∫∑t th∆∞ m·ª•c l√†m vi·ªác cho ti·∫øn tr√¨nh con
    )

    print(f"‚úÖ Zalo Bot Service started with PID: {process.pid}")
    return process

# ==============================================================================
# C√ÅC H√ÄM T√ÅC V·ª§ ƒê·ªäNH K·ª≤ (SCHEDULED TASKS)
# ==============================================================================

def scheduled_warning_job():
    """H√†m wrapper ƒë·ªìng b·ªô ƒë·ªÉ ch·∫°y t√°c v·ª• c·∫£nh b√°o b·∫•t ƒë·ªìng b·ªô."""
    print(f"‚è∞ Kicking off scheduled job: [Warning Cycle]")
    try:
        # Ch·∫°y coroutine t·ª´ m·ªôt ng·ªØ c·∫£nh ƒë·ªìng b·ªô
        asyncio.run(management_service.run_warning_cycle(MANAGED_GROUPS))
    except Exception as e:
        print(f"‚ùå Error during scheduled warning job: {e}")

def scheduled_kick_job():
    """H√†m wrapper ƒë·ªìng b·ªô ƒë·ªÉ ch·∫°y t√°c v·ª• kick b·∫•t ƒë·ªìng b·ªô."""
    print(f"‚è∞ Kicking off scheduled job: [Kick Cycle]")
    try:
        asyncio.run(management_service.run_kick_cycle(MANAGED_GROUPS))
    except Exception as e:
        print(f"‚ùå Error during scheduled kick job: {e}")

def run_scheduler():
    "Thi·∫øt l·∫≠p v√† ch·∫°y v√≤ng l·∫∑p cho c√°c t√°c v·ª• ƒë·ªãnh k·ª≥.H√†m n√†y s·∫Ω ch·∫°y trong m·ªôt thread ri√™ng."
    print("üïí Scheduler is running in standby mode (Discovery Mode).")
    #print("üïí Scheduler starting...")
    #schedule.every().day.at("08:00").do(scheduled_warning_job) # L√™n l·ªãch c·∫£nh b√°o: Ch·∫°y m·ªói ng√†y v√†o l√∫c 08:00
    #schedule.every().monday.at("10:00").do(scheduled_kick_job) # L√™n l·ªãch kick: Ch·∫°y m·ªói th·ª© Hai ƒë·∫ßu tu·∫ßn v√†o l√∫c 10:00
    #print("üöÄ Running initial warning cycle for testing...") # Ch·∫°y l·∫ßn ƒë·∫ßu ngay khi kh·ªüi ƒë·ªông ƒë·ªÉ test
    #scheduled_warning_job()

    while True:
        schedule.run_pending()
        time.sleep(60) # Ki·ªÉm tra l·ªãch m·ªói 60 gi√¢y

# ==============================================================================
# H√ÄM CH√çNH ƒê·ªÇ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG
# ==============================================================================

async def main():
    print("\n" + "*"*60)
    print("üöÄ INITIALIZING ALL SERVICES (Python & Node.js) üöÄ")
    print("*"*60)

    # --- 2. Kh·ªüi ch·∫°y c√°c ti·∫øn tr√¨nh/lu·ªìng ƒë·ªìng b·ªô ---

    # Ch·∫°y Zalo Bot (Node.js) trong m·ªôt thread ri√™ng ƒë·ªÉ qu·∫£n l√Ω
    zalo_process = None
    def start_and_manage_zalo():
        nonlocal zalo_process
        zalo_process = run_zalo_bot_process()
        zalo_process.wait() # Ch·ªù ti·∫øn tr√¨nh k·∫øt th√∫c

    zalo_thread = threading.Thread(target=start_and_manage_zalo, name="ZaloProcessManager", daemon=True)

    web_thread = threading.Thread(target=run_web_app, name="WebApp", daemon=True)
    scheduler_thread = threading.Thread(target=run_scheduler, name="Scheduler", daemon=True)

    zalo_thread.start()
    web_thread.start()
    scheduler_thread.start()

    # --- 3. Kh·ªüi ch·∫°y c√°c bot b·∫•t ƒë·ªìng b·ªô c·ªßa Python ---
    discord_task = asyncio.create_task(start_discord_bot(), name="DiscordBotTask")
    telegram_task = asyncio.create_task(start_telegram_bot(), name="TelegramBotTask")

    print("‚úÖ All components are starting...")
    try:
        await asyncio.gather(discord_task, telegram_task)
    finally:
        # --- 4. D·ªçn d·∫πp khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c ---
        print("\nüõë Shutting down... Terminating Zalo Bot process.")
        if zalo_process:
            zalo_process.terminate() # G·ª≠i t√≠n hi·ªáu ƒë·ªÉ t·∫Øt ti·∫øn tr√¨nh Node.js


if __name__ == "__main__":
    try:

        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë System shutdown requested by user. Goodbye!")


