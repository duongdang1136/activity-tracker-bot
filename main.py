import asyncio
import threading
import time
import schedule
from typing import List, Dict

# Import c√°c h√†m kh·ªüi ƒë·ªông t·ª´ c√°c module t∆∞∆°ng ·ª©ng
from bot.discord_bot import start_discord_bot
from bot.telegram_bot import start_telegram_bot
from bot.zalo_listener import run_zalo_listener
from web.app import run_web_app
from services import management_service
from config import settings

# ==============================================================================
# C·∫§U H√åNH TRUNG T√ÇM CHO C√ÅC NH√ìM C·∫¶N QU·∫¢N L√ù
# ==============================================================================
# Thay th·∫ø c√°c gi√° tr·ªã UUID v√† ID n√†y b·∫±ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ database c·ªßa b·∫°n.
# B·∫°n c√≥ th·ªÉ l·∫•y c√°c ID n√†y t·ª´ b·∫£ng `platform_groups` v√† `platforms` trong Supabase.
MANAGED_GROUPS: List[Dict] = [
    {
        'group_name': 'Trading Squad (Discord)', # B·∫°n c√≥ th·ªÉ ƒë·∫∑t t√™n b·∫•t k·ª≥ ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
        'group_db_id': '3a6c0697-041b-4212-9ce0-e95ec68f58b2', # groupid c·ªßa Discord b·∫°n cung c·∫•p
        'platform_db_id': 2, # ID c·ªßa platform 'Discord' trong b·∫£ng platforms
        'platform_name': 'Discord',
    },
    {
        'group_name': 'ƒê·∫∑ng Gia (Zalo)', # T√™n nh√≥m Zalo c·ªßa b·∫°n
        'group_db_id': '6799604717677589329', # <<--- THAY TH·∫æ B·∫∞NG groupid ZALO C·ª¶A B·∫†N
        'platform_db_id': 1, # ID c·ªßa platform 'Zalo' trong b·∫£ng platforms
        'platform_name': 'Zalo',
    },
    # Th√™m c√°c nh√≥m kh√°c ·ªü ƒë√¢y n·∫øu c√≥...
]

# ==============================================================================
# C√ÅC H√ÄM T√ÅC V·ª§ ƒê·ªäNH K·ª≤ (SCHEDULED TASKS)
# ==============================================================================

def scheduled_warning_job():
    """H√†m wrapper ƒë·ªìng b·ªô ƒë·ªÉ ch·∫°y t√°c v·ª• c·∫£nh b√°o b·∫•t ƒë·ªìng b·ªô."""
    print(f"‚è∞ Kicking off scheduled job: [Warning Cycle]")
    try:
        # Ch·∫°y coroutine t·ª´ m·ªôt ng·ªØ c·∫£nh ƒë·ªìng b·ªô
        asyncio.run(management_service.run_warning_cycle(MANAGED_GROUPS))
    except Exception as e:
        print(f"‚ùå Error during scheduled warning job: {e}")

def scheduled_kick_job():
    """H√†m wrapper ƒë·ªìng b·ªô ƒë·ªÉ ch·∫°y t√°c v·ª• kick b·∫•t ƒë·ªìng b·ªô."""
    print(f"‚è∞ Kicking off scheduled job: [Kick Cycle]")
    try:
        asyncio.run(management_service.run_kick_cycle(MANAGED_GROUPS))
    except Exception as e:
        print(f"‚ùå Error during scheduled kick job: {e}")

def run_scheduler():
    "Thi·∫øt l·∫≠p v√† ch·∫°y v√≤ng l·∫∑p cho c√°c t√°c v·ª• ƒë·ªãnh k·ª≥.H√†m n√†y s·∫Ω ch·∫°y trong m·ªôt thread ri√™ng."
    print("üïí Scheduler is running in standby mode (Discovery Mode).")
    #print("üïí Scheduler starting...")
    #schedule.every().day.at("08:00").do(scheduled_warning_job) # L√™n l·ªãch c·∫£nh b√°o: Ch·∫°y m·ªói ng√†y v√†o l√∫c 08:00       
    #schedule.every().monday.at("10:00").do(scheduled_kick_job) # L√™n l·ªãch kick: Ch·∫°y m·ªói th·ª© Hai ƒë·∫ßu tu·∫ßn v√†o l√∫c 10:00  
    #print("üöÄ Running initial warning cycle for testing...") # Ch·∫°y l·∫ßn ƒë·∫ßu ngay khi kh·ªüi ƒë·ªông ƒë·ªÉ test
    #scheduled_warning_job()

    while True:
        schedule.run_pending()
        time.sleep(60) # Ki·ªÉm tra l·ªãch m·ªói 60 gi√¢y

# ==============================================================================
# H√ÄM CH√çNH ƒê·ªÇ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG
# ==============================================================================

async def main():
    """
    H√†m ch√≠nh b·∫•t ƒë·ªìng b·ªô, ƒëi·ªÅu ph·ªëi kh·ªüi ƒë·ªông t·∫•t c·∫£ c√°c th√†nh ph·∫ßn.
    """
    print("\n" + "*"*60)
    print("üöÄ INITIALIZING MULTI-PLATFORM BOT SYSTEM üöÄ")
    print("*"*60)

    # C√°c t√°c v·ª• ƒë·ªìng b·ªô (sync) c·∫ßn ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block v√≤ng l·∫∑p async
    # `daemon=True` ƒë·∫£m b·∫£o c√°c thread n√†y s·∫Ω t·ª± ƒë·ªông t·∫Øt khi ch∆∞∆°ng tr√¨nh ch√≠nh k·∫øt th√∫c
    
    
    zalo_thread = threading.Thread(target=run_zalo_listener, name="ZaloListener", daemon=True) # 1. Ch·∫°y Zalo Listener (th∆∞ vi·ªán zlapi l√† sync)
    web_thread = threading.Thread(target=run_web_app, name="WebApp", daemon=True) # 2. Ch·∫°y Web App (Flask l√† sync)
    scheduler_thread = threading.Thread(target=run_scheduler, name="Scheduler", daemon=True) # 3. Ch·∫°y Scheduler (th∆∞ vi·ªán schedule l√† sync)
    # B·∫Øt ƒë·∫ßu c√°c thread ƒë·ªìng b·ªô
    zalo_thread.start()
    web_thread.start()
    scheduler_thread.start()
    
    # C√°c t√°c v·ª• b·∫•t ƒë·ªìng b·ªô (async) c√≥ th·ªÉ ch·∫°y c√πng nhau trong v√≤ng l·∫∑p s·ª± ki·ªán ch√≠nh    
    # 1. Ch·∫°y Discord Bot (discord.py l√† async)
    discord_task = asyncio.create_task(start_discord_bot(), name="DiscordBotTask")    
    # 2. Ch·∫°y Telegram Bot (python-telegram-bot l√† async)
    telegram_task = asyncio.create_task(start_telegram_bot(), name="TelegramBotTask")
    # Ch·ªù t·∫•t c·∫£ c√°c t√°c v·ª• async ho√†n th√†nh (trong tr∆∞·ªùng h·ª£p n√†y l√† m√£i m√£i, cho ƒë·∫øn khi c√≥ l·ªói)
    await asyncio.gather(discord_task, telegram_task)

if __name__ == "__main__":
    try:
        # B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p s·ª± ki·ªán b·∫•t ƒë·ªìng b·ªô
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë System shutdown requested by user. Goodbye!")
    except Exception as e:
        print(f"\nüí• A critical error occurred in the main event loop: {e}")